frameworkVersion: "^3.35.2"

service: ${self:custom.appPrefix}

provider:
  name: aws
  region: ${opt:region}
  stage: ${opt:stage}
  runtime: nodejs18.x
  logRetentionInDays: 14
  architecture: arm64
  memorySize: 256
  stackTags:
    voxnest:billing:app: ${self:custom.appPrefix}
  environment:
    STAGE: ${opt:stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "events:PutEvents"
          Resource:
            Fn::GetAtt:
              - MainEventBus
              - Arn
        - Effect: Allow
          Action:
            - "sqs:SendMessage"
          Resource:
            Fn::GetAtt:
              - CheckEndpointQueue
              - Arn

custom:
  appPrefix: vn-lab-ppm-monitor
  prune:
    automatic: true
    number: 5

package:
  patterns:
    - "!.*"
    - "!serverless*.yml"
    - "!deployment"

plugins:
  - serverless-prune-plugin

resources:
  - ${file(deployment/resources/iam.yml)}
  - ${file(deployment/resources/sqs.yml)}
  - ${file(deployment/resources/events.yml)}

functions:
  #
  # Function: kickstart
  # Purpose: start the monitoring process by submitting monitoring
  #   jobs to an SQS queue
  # Failure mode: This function is invoked async from EventBridge so its retry
  #   policy is managed with maximumRetryAttempts/onFailure. In this
  #   specific case being this function re-triggered every minute from
  #   a scheduled event, we're NOT going to perform any retry in case
  #   this function fail and we don't need the initial event to be
  #   delivered to a DLQ
  #
  kickstart:
    name: ${self:custom.appPrefix}-kickstart
    handler: functions/kickstart/handler.kickstart
    environment:
      CHECK_QUEUE_URL:
        Fn::GetAtt:
          - CheckEndpointQueue
          - QueueUrl
    events:
      - schedule: rate(1 minute)
    maximumRetryAttempts: 0
  #
  # Function: checkEndpoint
  # Purpose: perform a single monitoring job and dispatch the
  #   resulting status event to EventBridge
  # Failure mode:  This function is invoked by the Lambda/SQS poller
  #   so its retry policy is managed by the SQS queue configuration. In this
  #   specific case, it's setup to allow for single delivery and then move the
  #   message to a blackhole DLQ that evicts them fast and we'd never redrive.
  #
  checkEndpoint:
    name: ${self:custom.appPrefix}-checkEndpoint
    handler: functions/check-endpoint/handler.checkEndpoint
    timeout: 15
    environment:
      EVENT_BUS: !Ref MainEventBus
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - CheckEndpointQueue
              - Arn